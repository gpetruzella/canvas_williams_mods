(function ($) {
    'use strict';

    /***********************************************
     ** UTILITY FUNCTIONS
     ***********************************************/

    // Randomize the elements of a responsive grid
    $.fn.randomize = function (selector) {
        (selector ? this.find(selector) : this).parent().each(function () {
            $(this).children(selector).sort(function () {
                return Math.random() - 0.5;
            }).detach().appendTo(this);
        });
        return this;
    };

    function isTouchDevice() {
        return !!('ontouchstart' in window || window.navigator.msMaxTouchPoints);
    }

    /***********************************************
     ** PAGE-SPECIFIC MODULES
     ***********************************************/

    function initProfilePage() {
        // Provide custom instructions for the "Select Profile Picture" modal dialog
        $(".profile-link").on('click', function () {
            const observer = new MutationObserver((mutations, obs) => {
                const modalTitle = $("#ui-id-1.ui-dialog-title");
                if (modalTitle.length) {
                    modalTitle.text("Faculty rely on photos to learn student names. Please consider using a photo that clearly shows your face.");
                    obs.disconnect(); // We found it, so we can stop observing.
                }
            });

            observer.observe(document.body, {
                childList: true,
                subtree: true
            });

            // As a safeguard, disconnect the observer after a few seconds if the modal doesn't appear
            setTimeout(() => {
                observer.disconnect();
            }, 5000);
        });
    }

    class FaceBook {
        constructor(rosterTable) {
            this.rosterTable = rosterTable;
            this.rosterControls = null;
            this.sectionControls = null;
            this.faceBookGrid = null;
            this.gridUsers = [];
            this.sectionMap = new Map();
            this.sections = ['All'];
            this.currentSectionIndex = 0;
            this.isLearningModeOn = false;
            this.areNamesHidden = false;
            this.init();
        }

        init() {
            this.insertControls();
            this.buildFaceBookGrid();
            this.mapSections();
            this.bindEvents();
        }

        insertControls() {
            const controlsHTML = `
                <div id="wms_roster_controls">
                    <button id="wms_roster_btn_learning" class="btn btn-small" title="(Photos viewable on-campus or via VPN)"><i class="icon-user"></i> Show Face Book</button>
                    <a href="#" id="wms_roster_toggle_names" title=""></a>
                    <span class="hide" id="wms_shuffle_delimiter">|&nbsp;&nbsp;</span>
                    <a href="#" id="wms_roster_shuffle" title=""></a>
                    <span class="hide" id="wms_filters_delimiter">|&nbsp;&nbsp;</span>
                    <a href="#" id="wms_more_filters" class="hide" title="Show/hide section filters">More filters</a>
                    <br /><br />
                </div>`;
            this.rosterTable.before(controlsHTML);
            this.rosterControls = $('#wms_roster_controls');

            const sectionControlsHTML = `<div id="wms_section_controls" class="hide" style="padding:10px;background:#f0f0f0;border:1px solid #ccc;border-radius:4px;margin-bottom:15px;"></div>`;
            this.rosterControls.after(sectionControlsHTML);
            this.sectionControls = $('#wms_section_controls');
        }

        buildFaceBookGrid() {
            const grid = $('<div id="wms_roster_grid"></div>');
            const rosterRows = this.rosterTable.find('tbody tr.rosterUser');

            rosterRows.each((index, row) => {
                const img = $(row).find('td:nth-child(1)').html();
                const name = $(row).find('td:nth-child(2)').html();
                const role = $(row).find('td:nth-child(6)').text();
                const userDiv = $(`<div class="wms_roster_user">${img}<small>${name}</small><br /><small>${role}</small></div>`);
                grid.append(userDiv);
            });

            this.rosterTable.before(grid);
            this.faceBookGrid = grid;
            this.gridUsers = grid.find('.wms_roster_user');
            this.faceBookGrid.hide();
        }

        mapSections() {
            const rows = this.rosterTable.find('tr.rosterUser');
            const sections = new Set();

            rows.each((index, row) => {
                const sectionDiv = $(row).find('div.section');
                const section = sectionDiv.length ? sectionDiv.text().trim() : 'No Section';
                sections.add(section);
                this.sectionMap.set(this.gridUsers[index], section);
            });

            this.sections = ['All', ...Array.from(sections).sort()];
        }

        bindEvents() {
            this.rosterControls.on('click', '#wms_roster_btn_learning', () => this.toggleLearningMode());
            this.rosterControls.on('click', '#wms_roster_toggle_names', () => this.toggleNames());
            this.rosterControls.on('click', '#wms_roster_shuffle', () => this.shuffleGrid());
            this.rosterControls.on('click', '#wms_more_filters', (e) => {
                e.preventDefault();
                this.toggleSectionFilters();
            });
            this.sectionControls.on('click', 'button', (e) => {
                const targetId = e.target.id;
                if (targetId === 'wms_prev_section') this.changeSection(-1);
                if (targetId === 'wms_next_section') this.changeSection(1);
                if (targetId === 'wms_all_sections') this.changeSection(0, true);
            });
        }

        toggleLearningMode() {
            this.isLearningModeOn = !this.isLearningModeOn;
            if (this.isLearningModeOn) {
                this.rosterTable.hide();
                this.faceBookGrid.show();
                this.rosterControls.find('#wms_roster_btn_learning').html("<i class=\"icon-user\"></i> Return to List");
                this.rosterControls.find('#wms_roster_toggle_names').text("Turn Learning Mode On").prop("title", "Hide names");
                this.rosterControls.find('#wms_shuffle_delimiter, #wms_roster_shuffle, #wms_filters_delimiter, #wms_more_filters').removeClass('hide');
                this.rosterControls.find('#wms_roster_shuffle').text("Shuffle").prop("title", "Reorder the roster");
                this.updateSectionDisplay();
            } else {
                this.rosterTable.show();
                this.faceBookGrid.hide();
                this.rosterControls.find('#wms_roster_btn_learning').html("<i class=\"icon-user\"></i> Show Face Book").prop("title", "(Photos viewable on-campus or via VPN)");
                this.rosterControls.find('#wms_roster_toggle_names, #wms_roster_shuffle').text("").prop("title", "");
                this.rosterControls.find('#wms_shuffle_delimiter, #wms_filters_delimiter, #wms_more_filters').addClass('hide');
                this.sectionControls.addClass('hide');
            }
        }

        toggleNames() {
            this.areNamesHidden = !this.areNamesHidden;
            const smalls = this.faceBookGrid.find('.wms_roster_user small');
            if (this.areNamesHidden) {
                this.rosterControls.find('#wms_roster_toggle_names').text("Turn Learning Mode Off").prop("title", "Show names");
                smalls.addClass('hide');
                this.gridUsers.each((i, user) => {
                    $(user).off('mouseenter mouseleave').on('mouseenter', () => $(user).find('small').removeClass('hide')).on('mouseleave', () => $(user).find('small').addClass('hide'));
                });
            } else {
                this.rosterControls.find('#wms_roster_toggle_names').text("Turn Learning Mode On").prop("title", "Hide names");
                smalls.removeClass('hide');
                this.gridUsers.off('mouseenter mouseleave');
            }
        }

        shuffleGrid() {
            this.faceBookGrid.randomize('.wms_roster_user');
            this.gridUsers = this.faceBookGrid.find('.wms_roster_user'); // re-query after shuffle
        }

        toggleSectionFilters() {
            this.sectionControls.toggleClass('hide');
            const linkText = this.sectionControls.hasClass('hide') ? "More filters" : "Hide filters";
            this.rosterControls.find('#wms_more_filters').text(linkText);
        }

        changeSection(direction, showAll = false) {
            if (showAll) {
                this.currentSectionIndex = 0;
            } else {
                this.currentSectionIndex = (this.currentSectionIndex + direction + this.sections.length) % this.sections.length;
            }
            this.updateSectionDisplay();
        }

        updateSectionDisplay() {
            const currentSection = this.sections[this.currentSectionIndex];
            let visibleCount = 0;

            this.gridUsers.each((index, user) => {
                const userSection = this.sectionMap.get(user);
                if (currentSection === 'All' || userSection === currentSection) {
                    $(user).show();
                    visibleCount++;
                } else {
                    $(user).hide();
                }
            });
            this.renderSectionControls(currentSection, visibleCount);
        }

        renderSectionControls(currentSection, visibleCount) {
            const truncate = (name) => name.length > 25 ? name.substring(0, 22) + '...' : name.padEnd(25, ' ');
            const displaySection = truncate(currentSection);
            this.sectionControls.html(`
                <strong>Section:</strong> <span title="${currentSection}">${displaySection}</span>
                <button id='wms_prev_section' class='btn btn-small' style='margin-left:10px;'>‚Üê Previous</button>
                <button id='wms_all_sections' class='btn btn-small' style='margin-left:5px;'>Show All</button>
                <button id='wms_next_section' class='btn btn-small' style='margin-left:5px;'>Next ‚Üí</button>
                <span style='margin-left:15px;color:#666;'>${visibleCount} users</span>
            `);
        }
    }

    function initPeoplePage() {
        const rosterObserver = new MutationObserver((mutations, obs) => {
            const rosterTable = $('table.roster.ic-Table');
            if (rosterTable.length && rosterTable.find('tr.rosterUser').length > 0) {
                if ($('#wms_roster_controls').length === 0) { // Ensure it only runs once
                    new FaceBook(rosterTable);
                }
                obs.disconnect();
            }
        });

        rosterObserver.observe(document.getElementById('content'), {
            childList: true,
            subtree: true
        });
    }

    class PresenterMode {
        constructor() {
            this.presenterButton = null;
            this.exitButton = null;
            this.init();
        }

        init() {
            this.insertButtons();
            this.bindEvents();
        }

        insertButtons() {
            $("NAV#breadcrumbs").after('<div id="wms_presenter_breadcrumb"><a href="#" class="btn btn-primary icon-none" title="Enable Presenter View">&nbsp;Presenter&nbsp;View</a></div>');
            $("#application").prepend('<div id="wms_presenter_exit_btn"><div id="wms_presenter_exit_text" class="wmsPresenterRotate wmsDisplayNone" title="Exit Presenter View">Exit&nbsp;Presenter&nbsp;View</div></div>');
            this.presenterButton = $("#wms_presenter_breadcrumb");
            this.exitButton = $("#wms_presenter_exit_btn");
        }

        bindEvents() {
            this.presenterButton.on('click', (e) => {
                e.preventDefault();
                this.enable();
            });
            this.exitButton.on('click', (e) => {
                e.preventDefault();
                this.disable();
            });
        }

        enable() {
            $("BODY").removeClass("course-menu-expanded");
            $("#wms_presenter_breadcrumb, HEADER, .ic-app-nav-toggle-and-crumbs, #left-side, #right-side-wrapper").addClass("wmsDisplayNone");
            $("#main").addClass("wmsMarginZero").css("cssText", "padding-left: 25px;max-width: 900px !important;");
            $("#wrapper-container, .ic-app-main-layout-horizontal").addClass("wmsMarginZero");

            this.scalePage(900);

            this.exitButton.addClass("wmsPresenterExit");
            this.exitButton.find("#wms_presenter_exit_text").removeClass("wmsDisplayNone");
        }

        disable() {
            location.reload();
        }

        isTouchDevice() {
            return !!('ontouchstart' in window || window.navigator.msMaxTouchPoints);
        }

        scalePage(minWidth) {
            if (!minWidth || this.isTouchDevice()) return;

            const parentElem = "#wrapper-container";
            $(parentElem).wrapInner('<div id="resizer-boundary" />');
            $("#resizer-boundary").wrapInner('<div id="resizer-supercontainer" />');

            const boundary = $("#resizer-boundary");
            const superContainer = $("#resizer-supercontainer");
            const docH = $(parentElem).height();

            const scalePageNow = () => {
                superContainer.width(minWidth);
                const winW = $(window).width();
                const newWidth = winW / minWidth;
                const newHeight = (docH * (newWidth * minWidth)) / minWidth;
                superContainer.css({
                    "transform": "scale(" + newWidth + ")",
                    "transform-origin": "0 0"
                });
                boundary.css({
                    "position": "relative",
                    "overflow": "hidden",
                    "height": newHeight + "px"
                });
            };

            scalePageNow();
            $(window).on('resize', scalePageNow);
        }
    }

    function initPresenterMode() {
        new PresenterMode();
    }

    function initLoginPage() {
        $(document).attr('title', 'Glow');
        $('#login_forgot_password').text("Forgot password?");
        $('.ic-Login__link').attr('style', 'display:none !important;');
        $('#login_forgot_password').attr('style', 'display:initial !important; float:right !important;');
        $('label.ic-Label').text("");
        $('img.broken-image, img.hidden-readable').attr('alt', 'broken image');
        $('.Button--login').attr('style', 'position:absolute !important; right:190px !important;');
        $("div.ic-Login__body").append(
            '<p id="wms-login-footer">' +
            '<a href="https://dean.williams.edu/policies/classroom-recordings-and-use-of-class-materials/" target="_blank" title="Williams policy on recording and distribution of course materials">Williams policy on recording and distribution of course materials</a><br />' +
            '<a href="http://oit.williams.edu/itech/glow/" target="_blank" title="Glow Help">Glow Help</a>' +
            '</p>'
        );
    }

    function initEnrollPage() {
        $("input[name=initial_action]").prev("p").text("Please enter your Username (without '@williams.edu') and password:");
        $("HEADER.ic-Login-confirmation__header").css("cssText", "background-color: #333333 !important;");
        $("IMG.ic-Login-confirmation__logo").attr("src", "https://apps.williams.edu/glow/images/enroll-login.png").prop("alt", "Williams College - GLOW");
    }

    function initInternalPages() {
        $("DIV.ic-app-nav-toggle-and-crumbs").addClass("wmsBreadCrumbsLine");
        $("FOOTER.ic-app-footer").addClass("wmsFooterLine");

        let userId;
        try {
            userId = ENV.current_user.id;
        } catch (e) {
            console.error("Could not retrieve user ID from ENV.current_user.id", e);
            return;
        }

        const resourcesLink = `
            <li class="menu-item">
                <a id="wms_resources_icon" href="/users/1234567/external_tools/481471" class="ic-app-header__menu-list-link">
                    <div class="menu-item-icon-container" aria-hidden="true">
                        <img src="https://apps.williams.edu/glow/images/icon-williams-resources.png" alt="Williams Resources" title="Williams Resources" />
                    </div>
                    <div class="menu-item__text">Resources</div>
                </a>
            </li>`;
        $("UL#menu li:nth-child(5)").after(resourcesLink);
    }

    function initGoogleAnalytics() {
        const gaId = 'UA-10912569-3';

        const script = document.createElement('script');
        script.async = true;
        script.src = `https://www.googletagmanager.com/gtag/js?id=${gaId}`;
        document.head.appendChild(script);

        window.dataLayer = window.dataLayer || [];
        function gtag() { dataLayer.push(arguments); }
        gtag('js', new Date());
        gtag('config', gaId);
    }

    /***********************************************
     ** ROUTER
     ***********************************************/
    $(document).ready(function () {
        const path = window.location.pathname;
        const href = window.location.href;

        // Profile pages
        if (path.match(/\/profile/) || path.match(/\/courses\/\d+\/users\/\d+/)) {
            initProfilePage();
        }
        // People page
        if (path.match(/\/courses\/\d+\/users/)) {
            initPeoplePage();
        }
        // Login page
        if (href.match(/\/login\/ldap/) || href.match(/\/login\/canvas/) || href.match(/\/login/)) {
            initLoginPage();
        }
        // Enroll page
        if (href.match(/\/enroll/)) {
            initEnrollPage();
        }
        // All internal pages
        initInternalPages();

        // Presenter mode on all pages except external tools
        if (!path.match(/\/external_tools/)) {
            initPresenterMode();
        }

        // Google Analytics
        initGoogleAnalytics();
    });

})(jQuery);
